# 1 "main.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "main.c"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4

# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 37 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 38 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 22 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4




typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 389 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 57 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 71 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef _G_fpos_t fpos_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));







extern FILE *tmpfile (void) ;
# 173 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 265 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 278 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 365 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 395 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 443 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 757 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 840 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 868 "/usr/include/stdio.h" 3 4

# 2 "main.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 128 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 157 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4







struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


extern unsigned int gnu_dev_major (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 85 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 254 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 145 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 255 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 563 "/usr/include/stdlib.h" 3 4
extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 644 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 817 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 837 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));







extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1006 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1017 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4

# 3 "main.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 90 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 153 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 225 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 252 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 302 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 329 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 384 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 409 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 427 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 498 "/usr/include/string.h" 3 4

# 4 "main.c" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 104 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 119 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/time.h" 3 4

# 5 "main.c" 2
# 1 "opencstl/opencstl.h" 1
       
# 1 "opencstl/defines.h" 1
# 37 "opencstl/defines.h"
       
# 3 "opencstl/opencstl.h" 2
# 1 "opencstl/error.h" 1
# 37 "opencstl/error.h"
       


# 1 "opencstl/types.h" 1
# 37 "opencstl/types.h"
       





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 44 "opencstl/types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 97 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 45 "opencstl/types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 46 "opencstl/types.h" 2

# 46 "opencstl/types.h"
typedef int(*cstl_compare)(const void*, const void*);
# 41 "opencstl/error.h" 2


void __cstl_error(char* msg, char* file, char* function, int line) {
 char err_msg[1024] = { 0 };




 sprintf(err_msg, "[%s] in %s , %s , %d\n", msg, file, function, line);


 exit(
# 52 "opencstl/error.h" 3 4
     1
# 52 "opencstl/error.h"
                 );
}
# 4 "opencstl/opencstl.h" 2

# 1 "opencstl/vector.h" 1
# 37 "opencstl/vector.h"
       







void* __cstl_vector(size_t type_size) {
 size_t header_sz = sizeof(size_t) * (7);
 void* ptr = (char*)malloc(header_sz + type_size * 1) + header_sz;
 void** container = &ptr;
 (((size_t*)*container)[((-7))]) = 2;
 (((size_t*)*container)[((-6))]) = header_sz;
 (((size_t*)*container)[((-5))]) = type_size;


 (((size_t*)*container)[(-3)]) = 0;
 (((size_t*)*container)[(-2)]) = 1;
 (((size_t*)*container)[(-1)]) = 0;
 return ptr;
}
void __cstl_vector_push_back(void** container, void* value) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 size_t length = (((size_t*)*container)[(-1)]);
 size_t capacity = (((size_t*)*container)[(-2)]);
 if (length == capacity) {
  void* b=realloc((char*)*container - header_sz, header_sz + capacity * 2 * type_size);
  if (b == 
# 66 "opencstl/vector.h" 3 4
          ((void *)0)
# 66 "opencstl/vector.h"
              ) {
   __cstl_error("Reallocation failed at vector push_back","opencstl/vector.h",__FUNCTION__,67);
  }
  *container = ((char*)b + header_sz);
  (((size_t*)*container)[(-2)]) *= 2;
 }
 memcpy((char*)*container + type_size*length, value, type_size);
 (((size_t*)*container)[(-1)])++;
}
void __cstl_vector_pop_back(void** container) {
 if ((((size_t*)*container)[(-1)]) <= 0) {
  __cstl_error("No elements in cstl_vector","opencstl/vector.h",__FUNCTION__,77);
 }
 (((size_t*)*container)[(-1)])--;
}
size_t __cstl_vector_size(void** container) {
 return (((size_t*)*container)[(-1)]);
}
void __cstl_vector_insert(void** container, void* iter, size_t N, void* value) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 size_t length = (((size_t*)*container)[(-1)]);
 size_t capacity = (((size_t*)*container)[(-2)]);
 size_t pos = (*(char**)iter - *(char**)container) / type_size;
 if (length+N > capacity) {
  capacity += N;
  void* b = realloc((char*)*container - header_sz, header_sz + capacity * type_size);
  if (b == 
# 93 "opencstl/vector.h" 3 4
          ((void *)0)
# 93 "opencstl/vector.h"
              ) {
   __cstl_error("Reallocation failed at vector insert","opencstl/vector.h",__FUNCTION__,94);
  }
  *container = ((char*)b + header_sz);
  (((size_t*)*container)[(-2)]) *= 2;
 }
 memmove((char*)*container + type_size*(pos + N),(char*)*container + type_size*pos, (length-pos+1)*type_size);
 for (size_t i = 0; i < N; i++) {
  memcpy((char*)*container + type_size*(pos+i), value, type_size);
 }
 (((size_t*)*container)[(-1)]) += N;
}
void __cstl_vector_erase(void** container, void* iter_begin, void* iter_end) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 size_t length = (((size_t*)*container)[(-1)]);
 size_t capacity = (((size_t*)*container)[(-2)]);
 size_t pos_begin = (*(char**)iter_begin - *(char**)container) / type_size;
 size_t pos_end = (*(char**)iter_end - *(char**)container) / type_size;
 memmove((char*)*container + type_size*(pos_begin), (char*)*container + type_size*(pos_end), (length-pos_begin+1)*type_size);
 (((size_t*)*container)[(-1)]) -= (pos_end - pos_begin);
}
void* __cstl_vector_begin(void** container) {
 return (void*)*container;
}
void* __cstl_vector_end(void** container) {
 size_t type_size = (((size_t*)*container)[((-5))]);
 size_t length = (((size_t*)*container)[(-1)]);
 return (void*)((char*)*container + (type_size*length));
}
void* __cstl_vector_rbegin(void** container) {
 size_t type_size = (((size_t*)*container)[((-5))]);
 size_t length = (((size_t*)*container)[(-1)]);
 return (void*)((char*)*container + (type_size*(length-1)));
}
void* __cstl_vector_rend(void** container) {
 size_t type_size = (((size_t*)*container)[((-5))]);
 return (void*)((char*)*container - (type_size));
}
void __cstl_vector_resize(void** container, size_t n, void* value) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 size_t length = (((size_t*)*container)[(-1)]);
 size_t capacity = (((size_t*)*container)[(-2)]);
 if (capacity < n) {
  void* b = realloc((char*)*container - header_sz, header_sz + n * type_size);
  if (b == 
# 139 "opencstl/vector.h" 3 4
          ((void *)0)
# 139 "opencstl/vector.h"
              ) {
   __cstl_error("Reallocation failed at vector resize","opencstl/vector.h",__FUNCTION__,140);
  }
  *container = ((char*)b + header_sz);
  (((size_t*)*container)[(-2)]) = n;
 }
 if (n > length) {
  if (value == 
# 146 "opencstl/vector.h" 3 4
              ((void *)0)
# 146 "opencstl/vector.h"
                  ) {
   memset((char*)*container + type_size*length, 0, type_size*(n - length));
  } else {
   for (size_t i = length; i < n; i++) {
    memcpy((char*)*container + type_size*(i), value, type_size);
   }
  }
 }
 (((size_t*)*container)[(-1)]) = n;
}
void* __cstl_vector_find(void** container, void* iter_begin, void* value) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 size_t length = (((size_t*)*container)[(-1)]);
 size_t capacity = (((size_t*)*container)[(-2)]);
 size_t pos = (*(char**)iter_begin - *(char**)container) / type_size;
 for (size_t i = pos; i < length; i++) {
  if (memcmp((char*)*container + type_size*(i), value, type_size) == 0) {
   return (char*)*container + type_size*(i);
  }
 }
 return 
# 167 "opencstl/vector.h" 3 4
       ((void *)0)
# 167 "opencstl/vector.h"
           ;
}
void __cstl_vector_clear(void** container) {
 (((size_t*)*container)[(-1)]) = 0;
}
void __cstl_vector_free(void** container) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 free((char*)(*container) - header_sz);
 *container = 
# 175 "opencstl/vector.h" 3 4
             ((void *)0)
# 175 "opencstl/vector.h"
                 ;
}
# 6 "opencstl/opencstl.h" 2
# 1 "opencstl/list.h" 1
# 37 "opencstl/list.h"
       






void* __cstl_list(size_t type_size) {
 size_t header_sz = sizeof(size_t) * (7);
 void* ptr = (char*)malloc(header_sz + sizeof(size_t)) + header_sz;
 void** container = &ptr;
 (((size_t*)*container)[((-7))]) = 3;
 (((size_t*)*container)[((-6))]) = header_sz;
 (((size_t*)*container)[((-5))]) = type_size;
 (((size_t*)*container)[(-2)]) = 0;
 (((size_t*)*container)[(-1)]) = 0;
 (((size_t*)*container)[(0)]) = 0;
 return ptr;
}
void* __cstl_list_node(size_t type_size) {

 size_t header_sz = sizeof(void*) * 3;
 size_t node_sz = type_size + header_sz;
 void* ptr = (char*)calloc(node_sz, 1) + header_sz;
 void** node = &ptr;
 (((size_t*)*node)[(-3)]) = 3;
 return ptr;
}
void __cstl_list_push_back_front(void** container, void* value, int ntail, int nhead) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 void** tail = (void**)&(((size_t*)*container)[((ntail==-1?-2:ntail))]);
 void** head = (void**)&(((size_t*)*container)[(nhead)]);
 void* n = __cstl_list_node(type_size);
 memcpy(n, value, type_size);
 if (*head == 
# 72 "opencstl/list.h" 3 4
             ((void *)0) 
# 72 "opencstl/list.h"
                  && *tail == 
# 72 "opencstl/list.h" 3 4
                              ((void *)0)
# 72 "opencstl/list.h"
                                  ) {
  *head = *tail = n;
 } else {
  (((size_t*)*tail)[(-(ntail + 2))]) = (size_t)n;
  (((size_t*)*&n)[(-(nhead + 2))]) = (size_t)*tail;
  *tail = n;
 }
}
void __cstl_list_pop_back_front(void** container, int ntail, int nhead) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 void** tail = (void**)&(((size_t*)*container)[((ntail==-1?-2:ntail))]);
 void** head = (void**)&(((size_t*)*container)[(nhead)]);
 if (*head == 
# 85 "opencstl/list.h" 3 4
             ((void *)0) 
# 85 "opencstl/list.h"
                  || *tail == 
# 85 "opencstl/list.h" 3 4
                              ((void *)0)
# 85 "opencstl/list.h"
                                  ) {
  __cstl_error("No elements in cstl_list","opencstl/list.h",__FUNCTION__,86);
 }
 if (*head == *tail) {
  free(&(((size_t*)*tail)[(-3)]));
  *head = *tail = 0;
 } else {
  *tail = (void*)(((size_t*)*tail)[(-(nhead + 2))]);
  void* fb = (void*)(((size_t*)*tail)[(-(ntail + 2))]);
  free(&(((size_t*)*&fb)[(-3)]));
  (((size_t*)*tail)[(-(ntail + 2))]) = 0;
 }
}
void* __cstl_list_next_prev(void* it, int n) {

 return (void*)(((size_t*)*&it)[(n)]);
}
size_t __cstl_list_size(void** container) {
 size_t sz = 0;
 for (void** it = (void**)(((size_t*)*container)[(0)]); it != 
# 104 "opencstl/list.h" 3 4
                                                            ((void *)0)
# 104 "opencstl/list.h"
                                                                ; it=(void**)__cstl_list_next_prev(it,-1)) {
  sz++;
 }
 return sz;
}

void __cstl_list_insert(void** container, void** iter, size_t N, void* value) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 void** tail = (void**)&(((size_t*)*container)[(-2)]);
 void** head = (void**)&(((size_t*)*container)[(0)]);
 void* nhead = __cstl_list_node(type_size); memcpy(nhead, value, type_size);
 void* ntail = nhead;
 for (size_t i = 1; i < N; i++) {
  void* n= __cstl_list_node(type_size); memcpy(n, value, type_size);
  (((size_t*)*&n)[(-2)]) = (size_t)ntail;
  (((size_t*)*&ntail)[(-1)]) = (size_t)n;
  ntail = n;
 }
 (((size_t*)*&ntail)[(-1)]) = (size_t)*iter;
 if (*head == 
# 124 "opencstl/list.h" 3 4
             ((void *)0) 
# 124 "opencstl/list.h"
                  && *tail == 
# 124 "opencstl/list.h" 3 4
                              ((void *)0)
# 124 "opencstl/list.h"
                                  ) {
  *head = nhead;
  *tail = ntail;
 } else if (*iter != 
# 127 "opencstl/list.h" 3 4
                    ((void *)0)
# 127 "opencstl/list.h"
                        ) {
  if ((((size_t*)*iter)[(-2)]) != 0) {
   (((size_t*)*&((((size_t*)*iter)[(-2)])))[(-1)]) = (size_t)nhead;
  }
  (((size_t*)*&nhead)[(-2)]) = (((size_t*)*iter)[(-2)]);
  (((size_t*)*iter)[(-2)]) = (size_t)ntail;
  if (*iter == *head) {
   *head = nhead;
  }
 } else {
  (((size_t*)*tail)[(-1)]) = (size_t)nhead;
  (((size_t*)*&nhead)[(-2)]) = (size_t)*tail;
  *tail = ntail;
 }
}
void __cstl_list_erase(void** container, void** iter_begin, void** iter_end) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 void** tail = (void**)&(((size_t*)*container)[(-2)]);
 void** head = (void**)&(((size_t*)*container)[(0)]);
 if (*iter_begin == 
# 147 "opencstl/list.h" 3 4
                   ((void *)0)
# 147 "opencstl/list.h"
                       ) {
  __cstl_error("iter_begin could not be NULL","opencstl/list.h",__FUNCTION__,148);
 }
 if (*iter_begin == *head) {
  *head = *iter_end;
  if (*head != 
# 152 "opencstl/list.h" 3 4
              ((void *)0)
# 152 "opencstl/list.h"
                  ) {
   (((size_t*)*head)[(-2)]) = 0;
  }
 } else {
  (((size_t*)*&(((size_t*)*iter_begin)[(-2)]))[(-1)]) = (size_t)*iter_end;
  if (*iter_end != 
# 157 "opencstl/list.h" 3 4
                  ((void *)0)
# 157 "opencstl/list.h"
                      ) {
   (((size_t*)*iter_end)[(-2)]) = (((size_t*)*iter_begin)[(-2)]);
  }
 }
 void* it = *iter_begin;
 while (it != *iter_end) {
  void* tmp = (void*)(((size_t*)*&it)[(-1)]);
  free(&(((size_t*)*&it)[(-3)]));
  it = tmp;
 }
 if (*iter_end == 
# 167 "opencstl/list.h" 3 4
                 ((void *)0)
# 167 "opencstl/list.h"
                     ) {
  *tail = 0;
 }
}
void* __cstl_list_begin(void** container) {
 return (void*)(((size_t*)*container)[(0)]);
}
void* __cstl_list_end_rend(void** container) {
 return 
# 175 "opencstl/list.h" 3 4
       ((void *)0)
# 175 "opencstl/list.h"
           ;
}
void* __cstl_list_rbegin(void** container) {
 return (void*)(((size_t*)*container)[(-2)]);
}
void __cstl_list_clear(void** container) {
 void** tail = (void**)&(((size_t*)*container)[(-2)]);
 void** head = (void**)&(((size_t*)*container)[(0)]);

 void* it = *head;
 while (it != 
# 185 "opencstl/list.h" 3 4
             ((void *)0)
# 185 "opencstl/list.h"
                 ) {
  void* tmp = (void*)(((size_t*)*&it)[(-1)]);
  free(&(((size_t*)*&it)[(-3)]));
  it = tmp;
 }
 *head = *tail = 
# 190 "opencstl/list.h" 3 4
                ((void *)0)
# 190 "opencstl/list.h"
                    ;
}
void __cstl_list_free(void** container) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 __cstl_list_clear(container);
 free((char*)(*container) - header_sz);
 *container = 
# 196 "opencstl/list.h" 3 4
             ((void *)0)
# 196 "opencstl/list.h"
                 ;
}
void* __cstl_list_find(void** container, void** iter_begin,void* value) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t type_size = (((size_t*)*container)[((-5))]);
 void** tail = (void**)&(((size_t*)*container)[(-2)]);
 void** head = (void**)&(((size_t*)*container)[(0)]);

 void* it = *iter_begin;
 while (it != 
# 205 "opencstl/list.h" 3 4
             ((void *)0)
# 205 "opencstl/list.h"
                 ) {
  if (memcmp(it, value, type_size) == 0) {
   return it;
  }
  it = (void*)(((size_t*)*&it)[(-1)]);
 }
 return 
# 211 "opencstl/list.h" 3 4
       ((void *)0)
# 211 "opencstl/list.h"
           ;
}
# 7 "opencstl/opencstl.h" 2
# 1 "opencstl/deque.h" 1
# 36 "opencstl/deque.h"
       







void* __cstl_deque(size_t type_size) {
 size_t header_sz = sizeof(size_t) * (7);
 void* ptr = (char*)malloc(header_sz + type_size * 2) + header_sz;
 void** container = &ptr;
 (((size_t*)*container)[((-7))]) = 4;
 (((size_t*)*container)[((-6))]) = header_sz;
 (((size_t*)*container)[((-5))]) = type_size;
 (((size_t*)*container)[(-3)]) = 2;
 (((size_t*)*container)[(-2)]) = 0;
 (((size_t*)*container)[(0)]) = -2;
 return (void*)((char*)ptr + type_size);
}
void __cstl_deque_push_back(void** container, void* value) {

 intmax_t distance = (((size_t*)*container)[(-1)]) + 1;

 size_t header_sz = (((size_t*)*container)[((-6) + distance)]);
 size_t type_size = (((size_t*)*container)[((-5) + distance)]);
 size_t length = (((size_t*)*container)[(-2 + distance)]);
 size_t capacity = (((size_t*)*container)[(-3 + distance)]);
 if (length == capacity + distance) {
  size_t distance_sz = (-distance)*type_size;
  void* b = calloc(1, header_sz + capacity * 2 * type_size);
  memcpy(b, (char*)*container - (header_sz + distance_sz), header_sz);
  distance = capacity * 2 / 4;
  memcpy((char*)b + header_sz + distance*type_size, *container, length*type_size);
  free((char*)*container - (header_sz + distance_sz));
  *container = ((char*)b + (header_sz + distance*type_size));
  (((size_t*)*container)[(-3 - distance)]) *= 2;
  (((size_t*)*container)[(-1)]) = -distance - 1;
 }
 memcpy((char*)*container + type_size*length, value, type_size);
 (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)])++;
}
void __cstl_deque_push_front(void** container, void* value) {
 intmax_t distance = (((size_t*)*container)[(-1)]) + 1;

 size_t header_sz = (((size_t*)*container)[((-6) + distance)]);
 size_t type_size = (((size_t*)*container)[((-5) + distance)]);
 size_t length = (((size_t*)*container)[(-2 + distance)]);
 size_t capacity = (((size_t*)*container)[(-3 + distance)]);
 if (distance == 0) {
  void* b = calloc(1, header_sz + capacity * 2 * type_size);
  memcpy(b, (char*)*container - header_sz, header_sz);
  distance = capacity * 2 / 4;
  memcpy((char*)b + header_sz + distance*type_size, *container, length*type_size);
  free((char*)*container - header_sz);
  *container = ((char*)b + (header_sz + distance*type_size));
  (((size_t*)*container)[(-3 - distance)]) *= 2;
  distance = -distance;
 }
 memcpy((char*)*container - type_size * 2, (char*)*container - type_size, type_size);
 memcpy((char*)*container - type_size, value, type_size);
 *container = (char*)*container - type_size;
 (((size_t*)*container)[(-1)]) = distance;
 (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)])++;
}
void __cstl_deque_pop_back(void** container) {
 if ((((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]) <= 0) {
  __cstl_error("No elements in cstl_deque","opencstl/deque.h",__FUNCTION__,103);
 }
 (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)])--;
}
void __cstl_deque_pop_front(void** container) {
 size_t type_size = (((size_t*)*container)[((-5) + (((size_t*)*container)[(-1)]) + 1)]);
 if ((((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]) <= 0) {
  __cstl_error("No elements in cstl_deque","opencstl/deque.h",__FUNCTION__,110);
 }
 memcpy(*container, (char*)*container - type_size, type_size);
 *container = (char*)*container + type_size;
 (((size_t*)*container)[(-1)])--;
 (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)])--;
}

void __cstl_deque_insert(void** container, void* it, size_t n, void* value) {
 intmax_t distance = (((size_t*)*container)[(-1)]) + 1;

 size_t header_sz = (((size_t*)*container)[((-6) + distance)]);
 size_t type_size = (((size_t*)*container)[((-5) + distance)]);
 size_t length = (((size_t*)*container)[(-2 + distance)]);
 size_t capacity = (((size_t*)*container)[(-3 + distance)]);
 size_t pos = (*(char**)it - *(char**)container) / type_size;
 if (length + n > capacity + distance) {
  capacity += n;
  void* b = realloc((char*)*container - header_sz + distance*type_size, header_sz + (capacity - distance)* type_size);
  *container = (char*)b + header_sz - distance*type_size;
  (((size_t*)*container)[(-3 + distance)]) += 2;
 }
 memmove((char*)*container + (pos + n)* type_size, (char*)*container + pos*type_size, (length - pos)*type_size);
 for (size_t i = 0; i < n; i++) {
  memcpy((char*)*container + (pos + i)*type_size, value, type_size);
 }
 (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]) += n;
}

void __cstl_deque_erase(void** container, void* begin, void* end) {
 size_t type_size = (((size_t*)*container)[((-5) + (((size_t*)*container)[(-1)]) + 1)]);
 size_t length = (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]);
 size_t pos = (*(char**)end - *(char**)begin) / type_size;

 memmove(*(char**)begin, *(char**)end, (char*)*container + (length+1)*type_size - *(char**)end);
 (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]) -= pos;
}

size_t __cstl_deque_size(void** container) {
 return (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]);
}

void __cstl_deque_resize(void** container, size_t n, void* value) {
 intmax_t distance = (((size_t*)*container)[(-1)]) + 1;
 size_t header_sz = (((size_t*)*container)[((-6) + distance)]);
 size_t type_size = (((size_t*)*container)[((-5) + distance)]);
 size_t length = (((size_t*)*container)[(-2 + distance)]);
 size_t capacity = (((size_t*)*container)[(-3 + distance)]);
 if (capacity + distance < n) {
  capacity = n;
  void* b = calloc(1, header_sz + capacity*type_size);
  memcpy(b, (char*)*container - header_sz + distance*type_size, header_sz);
  memcpy((char*)b + header_sz, *container, length*type_size);
  free((char*)*container - header_sz + distance*type_size);
  *container = (char*)b + header_sz;
  (((size_t*)*container)[(-1)]) = -1;
  distance = 0;
  (((size_t*)*container)[(-3)]) = n;
 }
 (((size_t*)*container)[(-2 + distance)]) = n;
 if (length < n) {
  if (value == 
# 171 "opencstl/deque.h" 3 4
              ((void *)0)
# 171 "opencstl/deque.h"
                  ) {
   memset((char*)*container + length*type_size, 0, (n - length)*type_size);
  }
  else {
   for (size_t i = length; i < n; i++) {
    memcpy((char*)*container + i*type_size, value, type_size);
   }
  }
 }
}

void* __cstl_deque_begin(void** container) {
 return *container;
}
void* __cstl_deque_end(void** container) {
 size_t type_size = (((size_t*)*container)[((-5) + (((size_t*)*container)[(-1)]) + 1)]);
 size_t length = (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]);
 return (char*)*container + length*type_size;
}
void* __cstl_deque_rbegin(void** container) {
 size_t type_size = (((size_t*)*container)[((-5) + (((size_t*)*container)[(-1)]) + 1)]);
 size_t length = (((size_t*)*container)[(-2 + (((size_t*)*container)[(-1)]) + 1)]);
 return (char*)*container + (length - 1)*type_size;
}
void* __cstl_deque_rend(void** container) {
 size_t type_size = (((size_t*)*container)[((-5) + (((size_t*)*container)[(-1)]) + 1)]);
 return (char*)*container - type_size;
}

void* __cstl_deque_find(void** container, void* iter_begin, void* value) {
 intmax_t distance = (((size_t*)*container)[(-1)]) + 1;
 size_t header_sz = (((size_t*)*container)[((-6) + distance)]);
 size_t type_size = (((size_t*)*container)[((-5) + distance)]);
 size_t length = (((size_t*)*container)[(-2 + distance)]);
 size_t capacity = (((size_t*)*container)[(-3 + distance)]);
 size_t pos = (*(char**)iter_begin - *(char**)container) / type_size;
 for (size_t i = pos; i < length; i++) {
  if (memcmp((char*)*container + type_size*(i), value, type_size) == 0) {
   return (char*)*container + type_size*(i);
  }
 }
 return 
# 212 "opencstl/deque.h" 3 4
       ((void *)0)
# 212 "opencstl/deque.h"
           ;
}
# 8 "opencstl/opencstl.h" 2
# 1 "opencstl/tree.h" 1
# 37 "opencstl/tree.h"
       
# 57 "opencstl/tree.h"
char nil_buffer[sizeof(void*) * 5] = { 0 };
void* nil = 
# 58 "opencstl/tree.h" 3 4
           ((void *)0)
# 58 "opencstl/tree.h"
               ;
void* __cstl_tree_node(size_t type_size,size_t node_type) {

 size_t node_sz = type_size + sizeof(void*) * 5;
 void* ptr = (char*)calloc(node_sz,1) + sizeof(void*) * 5;
 (((size_t*)*&ptr)[(-3)]) = node_type;
 (((size_t*)*&ptr)[(-5)]) = ((void*)0);
 return ptr;
}

void* __cstl_set(size_t key_size,int argc, ...) {
 if (nil == 
# 69 "opencstl/tree.h" 3 4
           ((void *)0)
# 69 "opencstl/tree.h"
               ) {
  nil = nil_buffer + sizeof(void*) * 5;
  (((size_t*)*&nil)[(-1)]) = (((size_t*)*&nil)[(-2)])= (((size_t*)*&nil)[(-4)])=nil;
 }
 va_list vl;
 
# 74 "opencstl/tree.h" 3 4
__builtin_va_start(
# 74 "opencstl/tree.h"
vl
# 74 "opencstl/tree.h" 3 4
,
# 74 "opencstl/tree.h"
argc
# 74 "opencstl/tree.h" 3 4
)
# 74 "opencstl/tree.h"
                  ;
 void* compare = *(void**)vl;
 if (argc == 0) {
  compare = 
# 77 "opencstl/tree.h" 3 4
           ((void *)0)
# 77 "opencstl/tree.h"
               ;
 }
 size_t header_sz = sizeof(size_t) * (7);
 void* ptr = (char*)malloc(header_sz + sizeof(size_t)) + header_sz;
 void** container = &ptr;
 (((size_t*)*container)[((-7))]) = 0;
 (((size_t*)*container)[((-6))]) = header_sz;
 (((size_t*)*container)[((-5))]) = key_size;
 (((size_t*)*container)[(-4)]) = 0;
 (((size_t*)*container)[(-3)]) = 0;
 (((size_t*)*container)[(-2)]) = (size_t)compare;
 (((size_t*)*container)[(-1)]) = 0;
 (((size_t*)*container)[(0)]) = (size_t)nil;
 return ptr;
}

void* __cstl_map(size_t key_size, size_t value_size,int argc, ...) {
 if (nil == 
# 94 "opencstl/tree.h" 3 4
           ((void *)0)
# 94 "opencstl/tree.h"
               ) {
  nil = nil_buffer + sizeof(void*) * 5;
  (((size_t*)*&nil)[(-1)]) = (((size_t*)*&nil)[(-2)])= (((size_t*)*&nil)[(-4)])=nil;
 }
 va_list vl;
 
# 99 "opencstl/tree.h" 3 4
__builtin_va_start(
# 99 "opencstl/tree.h"
vl
# 99 "opencstl/tree.h" 3 4
,
# 99 "opencstl/tree.h"
argc
# 99 "opencstl/tree.h" 3 4
)
# 99 "opencstl/tree.h"
                  ;
 void* compare = *(void**)vl;
 if (argc == 0) {
  compare = 
# 102 "opencstl/tree.h" 3 4
           ((void *)0)
# 102 "opencstl/tree.h"
               ;
 }
 size_t header_sz = sizeof(size_t) * (7);
 void* ptr = (char*)malloc(header_sz + sizeof(size_t)) + header_sz;
 void** container = &ptr;
 (((size_t*)*container)[((-7))]) = 1;
 (((size_t*)*container)[((-6))]) = header_sz;
 (((size_t*)*container)[((-5))]) = key_size;
 (((size_t*)*container)[(-4)]) = value_size;
 (((size_t*)*container)[(-3)]) = 0;
 (((size_t*)*container)[(-2)]) = (size_t)compare;
 (((size_t*)*container)[(-1)]) = 0;
 (((size_t*)*container)[(0)]) = (size_t)nil;
 return ptr;
}

void __cstl_tree_left_rotate(void** container, void* x) {
 void*** root = (void***)*container;
 void* y = (((size_t*)*&x)[(-1)]);
 (((size_t*)*&x)[(-1)]) = (((size_t*)*&y)[(-2)]);
 if ((((size_t*)*&y)[(-2)]) != nil) {
  (((size_t*)*&(((size_t*)*&y)[(-2)]))[(-4)]) = x;
 }
 (((size_t*)*&y)[(-4)]) = (((size_t*)*&x)[(-4)]);
 if ((((size_t*)*&x)[(-4)]) == nil) {
  *root = y;
 } else if (x == (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-2)])) {
  (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-2)]) = y;
 } else {
  (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-1)]) = y;
 }
 (((size_t*)*&y)[(-2)]) = x;
 (((size_t*)*&x)[(-4)]) = y;
}
void __cstl_tree_right_rotate(void** container, void* x) {
 void*** root = (void***)*container;
 void* y = (((size_t*)*&x)[(-2)]);
 (((size_t*)*&x)[(-2)]) = (((size_t*)*&y)[(-1)]);
 if ((((size_t*)*&y)[(-1)]) != nil) {
  (((size_t*)*&(((size_t*)*&y)[(-1)]))[(-4)]) = x;
 }
 (((size_t*)*&y)[(-4)]) = (((size_t*)*&x)[(-4)]);
 if ((((size_t*)*&x)[(-4)]) == nil) {
  *root = y;
 } else if (x == (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-1)])) {
  (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-1)]) = y;
 } else {
  (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-2)]) = y;
 }
 (((size_t*)*&y)[(-1)]) = x;
 (((size_t*)*&x)[(-4)]) = y;
}
void __cstl_tree_insert_fixup(void** container, void* z) {
 while ((((size_t*)*&(((size_t*)*&z)[(-4)]))[(-5)]) == ((void*)1)) {
  if ((((size_t*)*&z)[(-4)]) == (((size_t*)*&(((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]))[(-2)])) {
   void* y = (((size_t*)*&(((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]))[(-1)]);
   if ((((size_t*)*&y)[(-5)]) == ((void*)1)) {
    (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-5)]) = ((void*)0);
    (((size_t*)*&y)[(-5)]) = ((void*)0);
    (((size_t*)*&(((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]))[(-5)]) = ((void*)1);
    z = (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]);
   } else {
    if (z == (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-1)])) {
     z = (((size_t*)*&z)[(-4)]);
     __cstl_tree_left_rotate(container, z);
    }
    (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-5)]) = ((void*)0);
    (((size_t*)*&(((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]))[(-5)]) = ((void*)1);
    __cstl_tree_right_rotate(container, (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]));
   }
  } else {
   void* y = (((size_t*)*&(((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]))[(-2)]);
   if ((((size_t*)*&y)[(-5)]) == ((void*)1)) {
    (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-5)]) = ((void*)0);
    (((size_t*)*&y)[(-5)]) = ((void*)0);
    (((size_t*)*&(((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]))[(-5)]) = ((void*)1);
    z = (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]);
   } else {
    if (z == (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-2)])) {
     z = (((size_t*)*&z)[(-4)]);
     __cstl_tree_right_rotate(container, z);
    }
    (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-5)]) = ((void*)0);
    (((size_t*)*&(((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]))[(-5)]) = ((void*)1);
    __cstl_tree_left_rotate(container, (((size_t*)*&(((size_t*)*&z)[(-4)]))[(-4)]));
   }
  }
 }
 void*** root = (void***)*container;
 (((size_t*)*&*root)[(-5)]) = ((void*)0);
}

void __cstl_tree_insert(void** container, void* key,void* value) {
 size_t container_type=(((size_t*)*container)[((-7))]);
 size_t header_sz=(((size_t*)*container)[((-6))]);
 size_t key_size = (((size_t*)*container)[((-5))]);
 size_t value_size = (((size_t*)*container)[(-4)]);
 size_t type_size = key_size + value_size;
 cstl_compare compare = (cstl_compare)(((size_t*)*container)[(-2)]);

 void*** root = (void***)*container;
 void* n = __cstl_tree_node(type_size,container_type);
 memcpy(n, key, key_size);
 if (value) {
  memcpy((char*)n + key_size, value, value_size);
 }
 void* p = nil;
 while (*root!=nil) {
  p = *root;
  int r = compare? compare(*root, n) : memcmp(*root, n, type_size);
  if (r == 0) {
   return;
  } else if (r > 0) {
   root = (void***)&(((size_t*)*root)[(-2)]);
  } else {
   root = (void***)&(((size_t*)*root)[(-1)]);
  }
 }
 (((size_t*)*&n)[(-4)]) = (size_t)p;
 (((size_t*)*&n)[(-2)]) = (size_t)nil;
 (((size_t*)*&n)[(-1)]) = (size_t)nil;
 (((size_t*)*&n)[(-5)]) = ((void*)1);

 *root = (void**)n;
 __cstl_tree_insert_fixup(container, n);
}

void __cstl_tree_transplant(void** container, void* u, void* v) {
 void*** root = (void***)*container;
 if ((((size_t*)*&u)[(-4)]) == nil) {
  *root = v;
 } else if (u == (((size_t*)*&(((size_t*)*&u)[(-4)]))[(-2)])) {
  (((size_t*)*&(((size_t*)*&u)[(-4)]))[(-2)]) = v;
 } else {
  (((size_t*)*&(((size_t*)*&u)[(-4)]))[(-1)]) = v;
 }
 (((size_t*)*&v)[(-4)]) = (((size_t*)*&u)[(-4)]);
}
void* __cstl_tree_toleft(void* n) {
 while ((((size_t*)*&n)[(-2)])!=nil) {
  n = (((size_t*)*&n)[(-2)]);
 }
 return n;
}
void* __cstl_tree_toright(void* n) {
 while ((((size_t*)*&n)[(-1)]) != nil) {
  n = (((size_t*)*&n)[(-1)]);
 }
 return n;
}
void __cstl_tree_erase_fixup(void** container, void* x) {
 void*** root = (void***)*container;
 while (x != *root && (((size_t*)*&x)[(-5)]) == ((void*)0)) {
  intmax_t expression = (x == (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-2)]));
  intmax_t left = expression ? -2 : -1;
  intmax_t right = expression ? -1 : -2;
  void(*func[2])(void**, void*) = { __cstl_tree_left_rotate,__cstl_tree_right_rotate };
  if (!expression) {
   void(*tmp)(void**, void*) = func[0];
   func[0] = func[1];
   func[1] = tmp;
  }
  void* w = (((size_t*)*&(((size_t*)*&x)[(-4)]))[(right)]);
  if ((((size_t*)*&w)[(-5)]) == ((void*)1)) {
   (((size_t*)*&w)[(-5)]) = ((void*)0);
   (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-5)]) = ((void*)1);
   func[0](container, (((size_t*)*&x)[(-4)]));
   w= (((size_t*)*&(((size_t*)*&x)[(-4)]))[(right)]);
  }
  if ((((size_t*)*&(((size_t*)*&w)[(left)]))[(-5)]) == ((void*)0) && (((size_t*)*&(((size_t*)*&w)[(right)]))[(-5)]) == ((void*)0)) {
   (((size_t*)*&w)[(-5)]) = ((void*)1);
   x = (((size_t*)*&x)[(-4)]);
  } else {
   if ((((size_t*)*&(((size_t*)*&w)[(right)]))[(-5)]) == ((void*)0)) {
    (((size_t*)*&(((size_t*)*&w)[(left)]))[(-5)]) = ((void*)0);
    (((size_t*)*&w)[(-5)]) = ((void*)1);
    func[1](container, w);
    w = (((size_t*)*&(((size_t*)*&x)[(-4)]))[(right)]);
   }
   (((size_t*)*&w)[(-5)]) = (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-5)]);
   (((size_t*)*&(((size_t*)*&x)[(-4)]))[(-5)]) = ((void*)0);
   (((size_t*)*&(((size_t*)*&w)[(right)]))[(-5)]) = ((void*)0);
   func[0](container, (((size_t*)*&x)[(-4)]));
   x = *root;
  }
 }
 (((size_t*)*&x)[(-5)]) = ((void*)0);
}
void __cstl_tree_erase(void** container, void** iter) {
 if (iter == 
# 291 "opencstl/tree.h" 3 4
            ((void *)0)
# 291 "opencstl/tree.h"
                )return;
 size_t container_type = (((size_t*)*container)[((-7))]);
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t key_size = (((size_t*)*container)[((-5))]);
 size_t value_size = (((size_t*)*container)[(-4)]);
 size_t type_size = key_size + value_size;
 cstl_compare compare = (cstl_compare)(((size_t*)*container)[(-2)]);
 void*** root = (void***)*container;
 void* z = iter;

 void* y = z;
 void* x = 
# 302 "opencstl/tree.h" 3 4
          ((void *)0)
# 302 "opencstl/tree.h"
              ;
 size_t y_original_color = (size_t)(((size_t*)*&y)[(-5)]);
 if ((((size_t*)*&z)[(-2)]) == nil) {
  x = (((size_t*)*&z)[(-1)]);
  __cstl_tree_transplant(container, z, (((size_t*)*&z)[(-1)]));
 } else if ((((size_t*)*&z)[(-1)]) == nil) {
  x = (((size_t*)*&z)[(-2)]);
  __cstl_tree_transplant(container, z, (((size_t*)*&z)[(-2)]));
 } else {
  y = __cstl_tree_toleft((((size_t*)*&z)[(-1)]));
  y_original_color = (size_t)(((size_t*)*&y)[(-5)]);
  x = (((size_t*)*&y)[(-1)]);
  if ((((size_t*)*&y)[(-4)]) == z) {
   (((size_t*)*&x)[(-4)]) = y;
  } else {
   __cstl_tree_transplant(container, y, (((size_t*)*&y)[(-1)]));
   (((size_t*)*&y)[(-1)]) = (((size_t*)*&z)[(-1)]);
   (((size_t*)*&(((size_t*)*&y)[(-1)]))[(-4)]) = y;
  }
  __cstl_tree_transplant(container, z, y);
  (((size_t*)*&y)[(-2)]) = (((size_t*)*&z)[(-2)]);
  (((size_t*)*&(((size_t*)*&y)[(-2)]))[(-4)]) = y;
  (((size_t*)*&y)[(-5)]) = (((size_t*)*&z)[(-5)]);
 }
 if (y_original_color == (size_t)((void*)0)) {
  __cstl_tree_erase_fixup(container, x);
 }
 free(&(((size_t*)*&iter)[(-5)]));
}

void* __cstl_tree_find(void** container, void* key) {
 size_t container_type = (((size_t*)*container)[((-7))]);
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t key_size = (((size_t*)*container)[((-5))]);
 size_t value_size = (((size_t*)*container)[(-4)]);
 size_t type_size = key_size + value_size;
 cstl_compare compare = (cstl_compare)(((size_t*)*container)[(-2)]);
 void*** root = (void***)*container;
 while (*root != nil) {
  int r = compare ? compare(*root, key) : memcmp(*root, key, type_size);
  if (r == 0) {
   return *root;
  } else if (r > 0) {
   root = (void***)&(((size_t*)*root)[(-2)]);
  } else {
   root = (void***)&(((size_t*)*root)[(-1)]);
  }
 }
 return 
# 350 "opencstl/tree.h" 3 4
       ((void *)0)
# 350 "opencstl/tree.h"
           ;
}

void* __cstl_tree_begin(void** container) {
 void*** root = (void***)*container;
 return *root!=nil ? __cstl_tree_toleft(*root) : nil;
}
void* __cstl_tree_rbegin(void** container) {
 void*** root = (void***)*container;
 return *root != nil ? __cstl_tree_toright(*root) : nil;
}
void* __cstl_tree_end_rend(void** container) {
 return nil;
}
void __cstl_tree_clear(void** container) {
 size_t container_type = (((size_t*)*container)[((-7))]);
 size_t header_sz = (((size_t*)*container)[((-6))]);
 size_t key_size = (((size_t*)*container)[((-5))]);
 size_t value_size = (((size_t*)*container)[(-4)]);
 size_t type_size = key_size + value_size;
 cstl_compare compare = (cstl_compare)(((size_t*)*container)[(-2)]);
 void*** root = (void***)*container;

 void* c = *root;
 while (c != nil) {
  if ((((size_t*)*&c)[(-1)]) != nil) {
   void* m = __cstl_tree_toleft(c);
   (((size_t*)*&m)[(-2)]) = (((size_t*)*&c)[(-1)]);
   (((size_t*)*&(((size_t*)*&c)[(-1)]))[(-4)]) = (((size_t*)*&m)[(-2)]);
  }
  void* t = c;
  c = (((size_t*)*&c)[(-2)]);
  free(&(((size_t*)*&t)[(-5)]));
 }
 *root = nil;

}
void __cstl_tree_free(void** container) {
 size_t header_sz = (((size_t*)*container)[((-6))]);
 __cstl_tree_clear(container);
 free((char*)(*container) - header_sz);
 *container = 
# 391 "opencstl/tree.h" 3 4
             ((void *)0)
# 391 "opencstl/tree.h"
                 ;
}
void* __cstl_tree_next_prev(void* it,int r,int l,void*(todeep)(void*)) {


 if ((((size_t*)*&it)[(r)]) != nil) {
  it = todeep((((size_t*)*&it)[(r)]));
 } else {
  if ((((size_t*)*&(((size_t*)*&it)[(-4)]))[(l)]) == it) {
   it = (((size_t*)*&it)[(-4)]);
  } else {
   while ((((size_t*)*&(((size_t*)*&it)[(-4)]))[(r)]) == it) {
    it = (((size_t*)*&it)[(-4)]);
   }
   it = (((size_t*)*&it)[(-4)]);
  }
 }
 return it;
}
# 9 "opencstl/opencstl.h" 2

intmax_t is_deque(void** container) {
 if ((((size_t*)*container)[(-1)]) > 0x7fffffff)
  return 1;
 return 0;
}


void _cstl_push_back(void* container, ...) {
 va_list vl;
 void* va_ptr=
# 19 "opencstl/opencstl.h" 3 4
             ((void *)0)
# 19 "opencstl/opencstl.h"
                 ;
 
# 20 "opencstl/opencstl.h" 3 4
__builtin_va_start(
# 20 "opencstl/opencstl.h"
vl
# 20 "opencstl/opencstl.h" 3 4
,
# 20 "opencstl/opencstl.h"
container
# 20 "opencstl/opencstl.h" 3 4
)
# 20 "opencstl/opencstl.h"
;va_ptr=((char*)vl->reg_save_area)+sizeof(void*);;
 void* param1 = va_ptr;
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 } else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   __cstl_vector_push_back((void**)container, param1);
  }break;
  case 3: {
   __cstl_list_push_back_front((void**)container, param1,-1,0);
  }break;
  case 4: {
   __cstl_deque_push_back((void**)container, param1);
  }break;
  default:__cstl_error("Invalid operator","opencstl/opencstl.h",__FUNCTION__,38); break;
 }
}

void _cstl_push_front(void* container, ...) {
 va_list vl;
 void* va_ptr=
# 44 "opencstl/opencstl.h" 3 4
             ((void *)0)
# 44 "opencstl/opencstl.h"
                 ;
 
# 45 "opencstl/opencstl.h" 3 4
__builtin_va_start(
# 45 "opencstl/opencstl.h"
vl
# 45 "opencstl/opencstl.h" 3 4
,
# 45 "opencstl/opencstl.h"
container
# 45 "opencstl/opencstl.h" 3 4
)
# 45 "opencstl/opencstl.h"
;va_ptr=((char*)vl->reg_save_area)+sizeof(void*);;
 void* param1 = va_ptr;
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 3: {
   __cstl_list_push_back_front((void**)container, param1, 0, -1);
  }break;
  case 4: {
   __cstl_deque_push_front((void**)container, param1);
  }break;
  default:__cstl_error("Invalid operator","opencstl/opencstl.h",__FUNCTION__,61); break;
 }
}

void _cstl_pop_back(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   __cstl_vector_pop_back((void**)container);
  }break;
  case 3: {
   __cstl_list_pop_back_front((void**)container, -1, 0);
  }break;
  case 4: {
   __cstl_deque_pop_back((void**)container);
  }break;
 }
}

void _cstl_pop_front(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 3: {
   __cstl_list_pop_back_front((void**)container, 0,-1);
  }break;
  case 4: {
   __cstl_deque_pop_front((void**)container);
  }break;
 }
}

size_t _cstl_size(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 size_t sz = 0;
 switch (container_type) {
  case 2: {
   sz=__cstl_vector_size((void**)container);
  }break;
  case 3: {
   sz = __cstl_list_size((void**)container);
  }break;
   break;
  case 4: {
   sz = __cstl_deque_size((void**)container);
  }break;
 }
 return sz;
}

void* _cstl_next(void* it) {
 size_t node_type = (((size_t*)*&it)[(-3)]);
 switch (node_type) {
  case 3:{
   return __cstl_list_next_prev(it,-1);
  }break;
  case 0:
  case 1: {
   return __cstl_tree_next_prev(it,-1,-2,__cstl_tree_toleft);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,138); break;
 }
 return 
# 140 "opencstl/opencstl.h" 3 4
       ((void *)0)
# 140 "opencstl/opencstl.h"
           ;
}

void* _cstl_prev(void* it) {
 size_t node_type = (((size_t*)*&it)[(-3)]);
 switch (node_type) {
  case 3: {
   return __cstl_list_next_prev(it,-2);
  }break;
  case 0:
  case 1: {
   return __cstl_tree_next_prev(it, -2, -1, __cstl_tree_toright);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,153); break;
 }
 return 
# 155 "opencstl/opencstl.h" 3 4
       ((void *)0)
# 155 "opencstl/opencstl.h"
           ;
}


void _cstl_insert(void* container,int argc, ...) {
 va_list vl;
 void* va_ptr=
# 161 "opencstl/opencstl.h" 3 4
             ((void *)0)
# 161 "opencstl/opencstl.h"
                 ;
 
# 162 "opencstl/opencstl.h" 3 4
__builtin_va_start(
# 162 "opencstl/opencstl.h"
vl
# 162 "opencstl/opencstl.h" 3 4
,
# 162 "opencstl/opencstl.h"
container
# 162 "opencstl/opencstl.h" 3 4
)
# 162 "opencstl/opencstl.h"
;va_ptr=((char*)vl->reg_save_area)+sizeof(void*);;
 void* param1 = va_ptr;
 void* param2 = (*(void**)((char*)param1 + sizeof(void*)));
 void* param3 = (*(void**)((char*)param2 + sizeof(void*)));
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   if (argc == 2)__cstl_vector_insert((void**)container, param1, 1, param2);
   else __cstl_vector_insert((void**)container, param1, *(size_t*)param2, param3);
  }break;
  case 3: {
   if(argc==2)__cstl_list_insert((void**)container, param1,1, param2);
   else __cstl_list_insert((void**)container, param1, *(size_t*)param2, param3);
  }break;
  case 4: {
   if(argc==2)__cstl_deque_insert((void**)container, param1, 1, param2);
   else __cstl_deque_insert((void**)container, param1, *(size_t*)param2, param3);
  }break;
  case 1: {
   if(argc==2) __cstl_tree_insert((void**)container, param1, param2);
   else __cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,188);
  }break;
  case 0: {
   if(argc==1) __cstl_tree_insert((void**)container, param1,
# 191 "opencstl/opencstl.h" 3 4
                                                           ((void *)0)
# 191 "opencstl/opencstl.h"
                                                               );
   else __cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,192);
  }break;
 }
}

void _cstl_erase(void* container, int argc, ...) {
 va_list vl;
 void* va_ptr=
# 199 "opencstl/opencstl.h" 3 4
             ((void *)0)
# 199 "opencstl/opencstl.h"
                 ;
 
# 200 "opencstl/opencstl.h" 3 4
__builtin_va_start(
# 200 "opencstl/opencstl.h"
vl
# 200 "opencstl/opencstl.h" 3 4
,
# 200 "opencstl/opencstl.h"
container
# 200 "opencstl/opencstl.h" 3 4
)
# 200 "opencstl/opencstl.h"
;va_ptr=((char*)vl->reg_save_area)+sizeof(void*);;
 void* param1 = va_ptr;
 void* param2 = (*(void**)((char*)param1 + sizeof(void*)));
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   if (argc == 1) {
    param2 = (*(char**)param1)+ (((size_t*)*(void**)container)[((-5))]);
    __cstl_vector_erase((void**)container, param1, &param2);
   } else __cstl_vector_erase((void**)container, param1, param2);
  }break;
  case 3: {
   if (argc == 1) {
    param2 = _cstl_next(*(void**)param1);
    __cstl_list_erase((void**)container, param1, &param2);
   }
   else __cstl_list_erase((void**)container, param1, param2);
  }break;
  case 4: {
   if (argc == 1) {
    param2 = (*(char**)param1) + (((size_t*)*(void**)container)[((-5) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
    __cstl_deque_erase((void**)container, param1, &param2);
   } else __cstl_deque_erase((void**)container, param1, param2);
  }break;
  case 1:
  case 0: {
   __cstl_tree_erase((void**)container,*(void**) param1);
  }break;
 }
}

void _cstl_resize(void* container, int argc, ...) {
 va_list vl;
 void* va_ptr=
# 239 "opencstl/opencstl.h" 3 4
             ((void *)0)
# 239 "opencstl/opencstl.h"
                 ;
 
# 240 "opencstl/opencstl.h" 3 4
__builtin_va_start(
# 240 "opencstl/opencstl.h"
vl
# 240 "opencstl/opencstl.h" 3 4
,
# 240 "opencstl/opencstl.h"
container
# 240 "opencstl/opencstl.h" 3 4
)
# 240 "opencstl/opencstl.h"
;va_ptr=((char*)vl->reg_save_area)+sizeof(void*);;
 void* param1 = va_ptr;
 void* param2 = (*(void**)((char*)param1 + sizeof(void*)));
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   if (argc == 1)param2 = 
# 252 "opencstl/opencstl.h" 3 4
                         ((void *)0)
# 252 "opencstl/opencstl.h"
                             ;
   __cstl_vector_resize((void**)container, *(size_t*)param1, param2);
  }break;
  case 3: {

  }break;
  case 4: {
   if (argc == 1)param2 = 
# 259 "opencstl/opencstl.h" 3 4
                         ((void *)0)
# 259 "opencstl/opencstl.h"
                             ;
   __cstl_deque_resize((void**)container, *(size_t*)param1, &param2);
  }break;
  case 0: {

  }break;
 }
}

void* _cstl_begin(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   return __cstl_vector_begin((void**)container);
  }break;
  case 3: {
   return __cstl_list_begin((void**)container);
  }break;
  case 4: {
   return __cstl_deque_begin((void**)container);
  }break;
  case 0:
  case 1: {
   return __cstl_tree_begin((void**)container);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,290); break;
 }
 return 
# 292 "opencstl/opencstl.h" 3 4
       ((void *)0)
# 292 "opencstl/opencstl.h"
           ;
}

void* _cstl_rbegin(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   return __cstl_vector_rbegin((void**)container);
  }break;
  case 3: {
   return __cstl_list_rbegin((void**)container);
  }break;
  case 4: {
   return __cstl_deque_rbegin((void**)container);
  }break;
  case 0:
  case 1: {
   return __cstl_tree_rbegin((void**)container);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,317); break;
 }
 return 
# 319 "opencstl/opencstl.h" 3 4
       ((void *)0)
# 319 "opencstl/opencstl.h"
           ;
}

void* _cstl_end(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   return __cstl_vector_end((void**)container);
  }break;
  case 3: {
   return __cstl_list_end_rend((void**)container);
  }break;
  case 4: {
   return __cstl_deque_end((void**)container);
  }break;
  case 0:
  case 1: {
   return __cstl_tree_end_rend((void**)container);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,344); break;
 }
 return 
# 346 "opencstl/opencstl.h" 3 4
       ((void *)0)
# 346 "opencstl/opencstl.h"
           ;
}

void* _cstl_rend(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   return __cstl_vector_rend((void**)container);
  }break;
  case 3: {
   return __cstl_list_end_rend((void**)container);
  }break;
  case 4: {
   return __cstl_deque_rend((void**)container);
  }break;
  case 0:
  case 1: {
   return __cstl_tree_end_rend((void**)container);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,371); break;
 }
 return 
# 373 "opencstl/opencstl.h" 3 4
       ((void *)0)
# 373 "opencstl/opencstl.h"
           ;
}

void _cstl_clear(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   __cstl_vector_clear((void**)container);
  }break;
  case 3: {
   __cstl_list_clear((void**)container);
  }break;
  case 0:
  case 1: {
   __cstl_tree_clear((void**)container);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,395); break;
 }
}

void _cstl_free(void* container) {
 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 } else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   __cstl_vector_free((void**)container);
  }break;
  case 3: {
   __cstl_list_free((void**)container);
  }break;
  case 0:
  case 1: {
   __cstl_tree_free((void**)container);
  }break;
  default:__cstl_error("Invalid operation","opencstl/opencstl.h",__FUNCTION__,417); break;
 }
}

void* _cstl_find(void* container,int argc, ...) {
 va_list vl;
 void* va_ptr=
# 423 "opencstl/opencstl.h" 3 4
             ((void *)0)
# 423 "opencstl/opencstl.h"
                 ;
 
# 424 "opencstl/opencstl.h" 3 4
__builtin_va_start(
# 424 "opencstl/opencstl.h"
vl
# 424 "opencstl/opencstl.h" 3 4
,
# 424 "opencstl/opencstl.h"
container
# 424 "opencstl/opencstl.h" 3 4
)
# 424 "opencstl/opencstl.h"
;va_ptr=((char*)vl->reg_save_area)+sizeof(void*);;
 void* param1 = va_ptr;
 void* param2 = (*(void**)((char*)param1 + sizeof(void*)));

 size_t container_type;
 if (is_deque((void**)container)) {
  container_type = (((size_t*)*((void**)container))[((-7) + (intmax_t)(((size_t*)*((void**)container))[(-1)]) + 1)]);
 }
 else {
  container_type = (((size_t*)*((void**)container))[((-7))]);
 }
 switch (container_type) {
  case 2: {
   if (argc == 1) return __cstl_vector_find((void**)container, container, param1);
   else return __cstl_vector_find((void**)container, param1,param2);
  }break;
  case 3: {
   if (argc == 1) return __cstl_list_find((void**)container, (void**)&(((size_t*)*(void**)container)[(0)]),param1);
   else return __cstl_list_find((void**)container, param1,param2);
  }break;
  case 4: {
   if (argc == 1) return __cstl_deque_find((void**)container, container, param1);
   else return __cstl_deque_find((void**)container, param1, param2);
  }break;
  case 1:
  case 0: {
   return __cstl_tree_find((void**)container, param1);
  }break;
  default:__cstl_error("Invalid operator","opencstl/opencstl.h",__FUNCTION__,452); break;
 }
 return 
# 454 "opencstl/opencstl.h" 3 4
       ((void *)0)
# 454 "opencstl/opencstl.h"
           ;
}
# 6 "main.c" 2

void cstl_vector_test() {
 for (int i = 0; i < 30; i++)putchar('='); printf("opencstl{vector} test begin"); for (int i = 0; i < 30; i++)putchar('=');putchar('\n');;
 int* arr = __cstl_vector(sizeof(int));

 for (int i = 0; i < 10; i++) {

  {__auto_type __0=arr;__auto_type __1=i;_cstl_push_back(&__0,&__1);};
 }


 _cstl_pop_back(&(arr));

 {__auto_type __0=arr;__auto_type __1=arr + 0;__auto_type __2=777;_cstl_insert(&__0,&__1,&__2);};

 {__auto_type __0=arr;__auto_type __1=arr + 5;__auto_type __2=5;__auto_type __3=999;_cstl_insert(&__0,&__1,&__2,&__3);};


 {__auto_type __0=arr;__auto_type __1=arr + 3;__auto_type __2=arr+5;_cstl_erase(&__0,&__1,&__2);};

 {__auto_type __0=arr;__auto_type __1=15;__auto_type __2=-1;_cstl_resize(&__0,&__1,&__2);};

 for (int* it = _cstl_begin(&(arr)); it != _cstl_end(&(arr)); it++) {
  printf("[%3d] ", *it);
 }
 puts("");



 _cstl_free(&(arr));
 for (int i = 0; i < 30; i++)putchar('='); printf("opencstl{vector} test end"); for (int i = 0; i < 30; i++)putchar('=');putchar('\n');;
}
# 117 "main.c"
int main() {
 cstl_vector_test();




}
